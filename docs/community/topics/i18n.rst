Internationalization
====================

We use `Gettext <https://docs.python.org/3/library/gettext.html>`__ message catalogs for the theme's internationalization (I18N) and localization (L10N) and `pybabel <https://babel.pocoo.org/en/latest/messages.html>`__ to work with them.

User-facing strings in the theme should be internationalized, so that they can be translated into other languages.
This section covers how to mark text as translatable and how to translate the theme.

..Note
   Internationalization (or i18n) is the process of marking strings for translation so that the strings can be extracted from the source code and given to translators. Localization (l10n) is the process of translating the marked strings into different languages.

The general process for internationalizing and localizing the theme is as follows:

#. Mark natural language text as translatable.
#. Extract translatable text to a message catalog template ``POT`` (``PO`` template file).
#. Make a copy of the ``POT`` file for each language (locale) you want to translate (or update existing templates).
#. Compile the message catalogs to binary ``MO`` files.
#. Translate the message catalogs.


.. _adding-translatable-text:

Marking strings as translatable (internationalization)
------------------------------------------------------

All natural language text in the theme's components and layouts must be marked as translatable so that it can be extracted and translated.
For example, if you add a button with the text "Next page", you will need to mark this text as translatable.

To do so, you can use the Jinja2 ``trans`` block and/or a ``_()`` function to mark text as translatable in corresponding ``HTML`` templates (located in the ``src/pydata_sphinx_theme/theme/`` directory).
`Please refer to the Jinja2 documentation <https://jinja.palletsprojects.com/en/2.11.x/templates/#i18n>`__.
Remember to `manually escape variables <https://jinja.palletsprojects.com/en/2.11.x/templates/#working-with-manual-escaping>`__ if needed.

For example, to mark the text "Next page" as translatable, you would write:

.. code-block:: jinja

   <button type="button">
      {{- _("Next page") -}}
   </button>


Any text that is marked in this way will be discoverable by ``pybabel`` and used to generate the ``PO`` files.
Once you've marked the text as translatable, complete the steps outlined in :ref:`changing-natural-language-text`.

.. _changing-natural-language-text:

Updating the translation catalogs
-----------------------------------------

When you add or change natural language text in the theme, you must update the message catalogs to include the new or updated text. Follow these steps:

#. Edit the natural language text and ensure it is :ref:`marked as translatable <adding-translatable-text>`.

#. Generate/update the message catalog template (``POT`` file):

   .. code-block:: bash

      tox run -e i18n-extract

#. Update the message catalogs (``PO`` files) for the existing locales:

   .. code-block:: bash

      tox run -e i18n-update

This will update the translation files with new information about the position and text of the language you have modified.

If you *only* change non-translatable text (like HTML markup), the ``extract`` and ``update`` commands will only update the
positions (line numbers) of the translatable strings.
Updating positions is optional - the line numbers are to inform the human translator, not to perform the translation.

If you change translatable strings, the ``extract`` command will extract the new or updated strings to the ``POT`` file,
and the ``update`` command will try to perform a fuzzy match between the new or updated strings and existing translations in the ``PO`` files.
If there is a fuzzy match, a comment like ``#, fuzzy`` is added before the matched entry,
this means that the translation needs to be manually reviewed and possibly updated.
If after reviewing the translation you decide to keep the existing translation, you can remove the ``#, fuzzy`` comment from the entry.
Otherwise, it will add a new translation entry.

.. _adding-new-language:

Adding a new language
----------------------

The list of languages with existing (possibly incomplete) translations is available in the ``src/pydata_sphinx_theme/locale`` directory.

To add a new language, follow these steps:

#. Identify the `ISO 639-1 code <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`__ for the new language.

#. Make a copy of the ``POT`` file for this new language:

   .. code-block:: bash

      # for example, to add Quechua (ISO 639-1 code: qu)
      tox -e i18n-new-locale -- qu

#. Start translating the theme's text into the newly added language (see :ref:`translating-the-theme`).


.. _translating-the-theme:

Translating the theme
---------------------

We manage translations on the `PyData Sphinx Theme project on Transifex <https://explore.transifex.com/12rambau/pydata-sphinx-theme/>`__.

To contribute translations, follow these steps:

#. Sign up for a `Transifex account <https://www.transifex.com/signup/>`__.
#. Join the `PyData Sphinx Theme project <https://explore.transifex.com/12rambau/pydata-sphinx-theme/>`__.
#. Select the language you want to translate. If the language you are looking for is not listed, you can `open an issue
   on GitHub to request it <https://github.com/pydata/pydata-sphinx-theme/issues>`__.
#. Now you are ready to start translating the theme. If you are new to Transifex you can visit the `Transifex documentation <https://help.transifex.com/en/articles/6240403-translating-html-content>`__ for more information.

Once you have completed your translation, the PyData Sphinx Theme maintainers will review and approve it.

Translation tips
----------------

Translate phrases, not words
````````````````````````````

Full sentences and clauses must always be a single translatable string.
Otherwise, you can get ``next page`` translated as ``suivant page`` instead of as ``page suivante``, etc.

Dealing with variables and markup in translations
`````````````````````````````````````````````````````````````

If a variable (like the ``edit_page_provider_name`` theme option) is used as part of a phrase, it must be included within the translatable string.
Otherwise, the word order in other languages can be incorrect. In a Jinja template, surround the translatable string with ``{% trans variable=variable %}`` and ``{% endtrans %}``. For example:

.. code-block:: jinja

   {% trans provider=provider %}Edit on {{ provider }}{% endtrans %}

The translatable string is extracted as the Python format string ``Edit on %(provider)s``. This is so that the same translatable string can be used in both Python code and Jinja templates. It is the translator's responsibility to use ``%(provider)s`` verbatim in the translation.

If a non-translatable word or token (like HTML markup) is used as part of a phrase, it must also be included within the translatable string. For example:

.. code-block:: jinja

   {% trans theme_version=theme_version|e %}
   Built with the <a href="https://pydata-sphinx-theme.readthedocs.io/en/stable/index.html">PyData Sphinx Theme</a> {{ theme_version }}.
   {% endtrans %}

It is the translator's responsibility to use the HTML markup verbatim in the translation.


Translation files
------------------

Gettext and pybabel read a program's source and extract text that has been marked as translatable, known as "source strings".

There are three types of files used in the translation process:

PO file (``.po``)
  A `Portable Object (PO) file <https://www.gnu.org/software/gettext/manual/gettext.html#PO-Files>`__ which contains all the translatable entries.
  Each entry holds the relation between a source string and its translation.
  ``msgid`` contains the **source string**, and ``msgstr`` contains the **translation**.
  In a given PO file, all translations are expressed in a single target language.
  PO files are also known as "message catalogs".

  Entries begin with comments, on lines starting with the character ``#``.
  Comments are created and maintained by ``gettext``.
  Comment lines starting with ``#:`` contain references to the program's source.
  These references allow a human translator to find the source strings in their original context.
  Comment lines starting with ``#,`` contain flags like ``python-format``, which indicates that the source string contains placeholders like ``%(copyright)s``.
POT file (``.pot``)
  A Portable Object Template (POT) file is the same as a PO file, except that the translations are empty so that it can be used as a template for new languages.
MO file (``.mo``)
  A Machine Object (MO) file is a binary version of a PO file. PO files are compiled into MO files.

References
----------

I18N and L10N are deep topics. Here, we only cover the bare minimum needed to fulfill basic technical tasks. You might like:

-  `Internationalis(z)ing Code <https://www.youtube.com/watch?v=0j74jcxSunY>`__ by Computerphile on YouTube
-  `Falsehoods Programmers Believe About Language <http://garbled.benhamill.com/2017/04/18/falsehoods-programmers-believe-about-language>`__ by Ben Hamill
