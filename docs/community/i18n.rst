Internationalization
====================

.. warning::

   This theme is still in the process of setting up internationalization.
   Some of the text below may not yet be correct (for example, we do not yet have a ``locales/`` directory).
   Follow these issues to track progress:

   - https://github.com/pydata/pydata-sphinx-theme/issues/1162
   - https://github.com/pydata/pydata-sphinx-theme/issues/257

Internationalization (I18N) and localization (L10N) is performed using `Gettext <https://docs.python.org/3/library/gettext.html>`__.
Gettext reads a program's source and extracts text that has been marked as translatable, known as "source strings.
Gettext uses three types of files:

PO file (``.po``)
  A `Portable Object (PO) file <https://www.gnu.org/software/gettext/manual/gettext.html#PO-Files>`__ is made up of many entries.
  Each entry holds the relation between a source string and its translation.
  ``msgid`` contains the **source string**, and ``msgstr`` contains the **translation**.
  In a given PO file, all translations are expressed in a single target language.
  PO files are also known as "message catalogs".

  Entries begin with comments, on lines starting with the character ``#``.
  Comments are created and maintained by Gettext.
  Comment lines starting with ``#:`` contain references to the program's source.
  These references allow a human translator to find the source strings in their original context.
  Comment lines starting with ``#,`` contain flags like ``python-format``, which indicates that the source string contains placeholders like ``%(copyright)s``.
POT file (``.pot``)
  A Portable Object Template (POT) file is the same as a PO file, except the translations are empty, so that it can be used as a template for new languages.
MO file (``.mo``)
  A Machine Object (MO) file is a binary version of a PO file. PO files are compiled to MO files, which are required by Gettext.

.. _adding-natural-language-text:

Adding natural language text
----------------------------

All natural language text must be marked as translatable, so that it can be extracted by Gettext and translated by humans.

Jinja2 provides a ``trans`` block and a ``_()`` function to mark text as translatable.
`Please refer to the Jinja2 documentation <https://jinja.palletsprojects.com/en/2.11.x/templates/#i18n>`__.
Remember to `manually escape <https://jinja.palletsprojects.com/en/2.11.x/templates/#working-with-manual-escaping>`__ variables if needed.

Then, complete the steps for :ref:`changing-natural-language-text`.

.. _changing-natural-language-text:

Changing natural language text
------------------------------

#. Edit the natural language text as desired.

#. Update the message catalog template (POT file):

   .. code-block:: bash

      pybabel extract . -F babel.cfg -o src/pydata_sphinx_theme/locale/sphinx.pot -k '_ __ l_ lazy_gettext'

#. Update the message catalogs (PO files):

   .. code-block:: bash

      python setup.py update_catalog

.. _translating-the-theme:

Translating the theme
---------------------

These steps use the Spanish language as an example.
To translate the theme to another language, replace ``es`` with the language's two-letter lowercase `ISO 639-1 code <https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes>`__.

#. If the language's code matches no sub-directory of the `pydata_sphinx_theme/locale <https://github.com/pydata/pydata-sphinx-theme/tree/main/pydata_sphinx_theme/locale>`__ directory, initialize the language's message catalog (PO file):

   .. code-block:: bash

      python setup.py init_catalog -l es

#. Edit the language's message catalog at ``pydata_sphinx_theme/locale/es/LC_MESSAGES/sphinx.po``. For each source string introduced by the ``msgid`` keyword, add its translation after the ``msgstr`` keyword.

#. Compile the message catalogs of every language. This creates or updates the MO files:

.. code-block:: bash

   python setup.py compile_catalog


References
----------

I18N and L10N are deep topics. Here, we only cover the bare minimum needed to fulfill basics technical tasks. You might like:

-  `Internationalis(z)ing Code <https://www.youtube.com/watch?v=0j74jcxSunY>`__ by Computerphile on YouTube
-  `Falsehoods Programmers Believe About Language <http://garbled.benhamill.com/2017/04/18/falsehoods-programmers-believe-about-language>`__ by Ben Hamill
