************
Contributing
************

The documentation for this theme (what you are looking at now) also serves
as a demo site for the theme.
These sections describe how to get set up with a development environment, and begin contributing.

.. _basic-environment:

Set up a basic development environment
======================================

We automate many development tasks with these two tools:

- `nox <https://nox.thea.codes/>`_, for automating common development tasks
- `pre-commit <https://pre-commit.com/>`_ for automatically enforcing code standards

At a minimum, set up your local environment with these two tools by running the following command:

.. code-block:: console

    $ pip install .[dev]

Then, activate ``pre-commit`` locally with the following command:

.. code-block:: console

    $ pre-commit install

Most sections below use ``nox`` to automate tasks and environments.
This allows you to run jobs in a contained environment so that you know what tools are installed.
There's also a section below that describes how to manually set up your environment.


Build the documentation
=======================

Building the documentation will use ``sphinx`` to generate the latest documentation in ``docs/`` and place them in a ``docs/_build/html`` folder.
If the docs have already been built, it will only build new pages that have been updated.

To build the documentation with ``nox``, first follow :ref:`basic-environment`,
then run the following command:

.. code-block:: console

    $ nox -s docs

This will re-use pre-existing environments if possible. To re-execute the installation commands, use this pattern:

.. code-block:: console

    $ nox -s docs -- reinstall

Or to completely remove the environment generated by ``nox`` and start from scratch:

.. code-block:: console

    $ rm -rf .nox/docs

.. admonition:: Use nox with your global environment
    :class: tip

    If you'd like to use ``nox`` with your **global** environment (the one from
    which you are calling ``nox``), you can do so with
    
    .. code-block:: console
        
        $ nox --force-venv-backend none

        # alternatively:
        $ nox -fb none
        
    Using `none` will re-use your current global environment. See
    `the nox documentation <https://nox.thea.codes/en/stable/usage.html#forcing-the-sessions-backend>`_
    for more details.

If you've :ref:`manually set up your environment <manual-environment>`, you can build them with:

.. code-block:: console

    $ cd docs
    $ make html

.. Note::

    If you wish to customize the CSS or JS beyond what is available in the
    :ref:`configuration` and :ref:`customizing` sections of the user guide,
    extra steps are required. The next section covers the full workflow, from
    changing the source files, to seeing the updated site.

Build the CSS/JS assets
=======================

The source files for CSS and JS assets are in ``src/``.
These are then built and bundled with the theme (e.g., ``scss`` is turned into ``css``).
Building the CSS/JS assets requires a javascript development stack (``yarn``, ``webpack``, and anything in ``yarn.lock``).

To build the CSS/JS assets with ``nox``, first follow :ref:`basic-environment`,
then run the following command:

.. code-block:: console

    $ nox -s build

If you've :ref:`manually set up your environment <manual-environment>`, you can build them with:

.. code-block:: console

    $ yarn build:production


Run a development server
========================

You can run a development server so that changes to make to ``src/`` are automatically bundled with the package, and the documentation is immediately reloaded in a live preview window.

When working on the theme, saving changes to any of these directories:

- ``src/js/index.js``
- ``src/scss/index.scss``
- ``docs/**/*.rst``
- ``docs/**/*.py``

will cause the development server to do the followin:

- bundle/copy the CSS, JS, and vendored fonts
- regenerate the Jinja2 macros
- re-run Sphinx

To run the development server with ``nox``, first follow :ref:`basic-environment`,
then run the following command:

.. code-block:: console

    $ nox -s docs-live


Run the tests
=============

This theme uses ``pytest`` for its testing, with a lightweight fixture defined
in the ``test_build.py`` script that makes it easy to run a Sphinx build using
this theme and inspect the results.

In addition, we use `pytest-regressions <https://pytest-regressions.readthedocs.io/en/latest/>`_
to ensure that the HTML generated by the theme is what we'd expect. This module
provides a ``file_regression`` fixture that will check the contents of an object
against a reference file on disk. If the structure of the two differs, then the
test will fail. If we *expect* the structure to differ, then delete the file on
disk and run the test. A new file will be created, and subsequent tests will pass.

To run the tests with ``nox``, first follow :ref:`basic-environment`,
then run the following command:

.. code-block:: console

    $ nox -s test

If you've :ref:`manually set up your environment <manual-environment>`, you can build them with:

.. code-block:: console

    $ pytest

.. _manual-environment:

Manually set up a development environment
=========================================

To set up your development environment, you'll need to set up both a Python and a Javascript environment.
As a convenience, this environment is described in the file at ``environment.yml``.
However, the sections below cover how to install it manually.

Install python development dependencies
---------------------------------------

To install this theme locally, along with the dependencies needed to develop it, take the following steps:

1. **Clone the repository locally**. Run this command:

   .. code-block:: console

       $ git clone https://github.com/pydata/pydata-sphinx-theme
       $ cd pydata-sphinx-theme

2. **Install the theme with dev dependencies**. Run this command:

   .. code-block:: console

       $ pip install -e .[dev,test]

Install javascript development dependencies
-------------------------------------------

The javascript development workflow relies primarily on `the yarn package managed <https://yarnpkg.com/>`__.
This will be used to install a number of javascript dependencies defined originally in ``package.json``, and with specific versions pinned in ``yarn.lock``.
The easiest way to accomplish this is using `conda-forge <https://conda-forge.org/>`_, which these instructions cover below.

1. **Install yarn**:

   .. code-block:: console

       $ conda install -c conda-forge yarn "nodejs>=14,<15"

   Re recommend using node 14 as it is the latest LTS release of ``nodejs``.

2. **Initialize your yarn environment**:
   
   .. code-block:: console

       $ yarn --frozen-lockfile

   This will install all of the dependencies defined in ``yarn.lock`` and place them in a folder at ``node_modules/``.
   
   .. note::

       If you do not include ``--frozen-lockfile``, then yarn will update all of the frozen dependency versions in ``yarn.lock``.
       If you accidentally do this, revert the changes to ``yarn.lock`` and re-run the command with ``--frozen-lockfile``.


Update JS dependencies and their versions
=========================================

The javascript dependencies for this package are defined in ``package.json``, and broken down into a few categories like ``dependencies`` and ``devDependencies``.
While ``package.json`` defines files versions loosely, explicit versions are "frozen" into a file called ``yarn.lock``.

If you wish to update the versions of this theme's JS dependencies, follow these steps:

1. Update packages in ``packages.json``.
2. Run the ``yarn`` command **without** ``--frozen-lockfile``.

   .. code-block:: console

       $ yarn

3. Commit changes to ``yarn.lock`` and ``package.json``. It's important that both of these are changed together to ensure our builds are reproducible.


Location and structure of CSS/JS assets
=======================================

The CSS and JS for this theme are built for the browser from ``src/*`` with
`webpack <https://webpack.js.org/>`__. The main entrypoints are:

- CSS: ``src/scss/index.scss``

  - the main part of the theme assets
  - customizes `Bootstrap <https://getbootstrap.com/>`__ with `Sass <https://sass-lang.com>`__
  - points to the ``font-face`` of vendored web fonts, but does not include their
    CSS ``@font-face`` declaration

- JS: ``src/js/index.js``

  - provides add-on Bootstrap features, as well as some custom navigation behavior

- webpack: ``webpack.js``

  - captures the techniques for transforming the JS and CSS source files in
    ``src/`` into the production assets in ``pydata_sphinx_theme/static/``

These entrypoints, and all files they reference, are bundled into
``pydata_sphinx_theme/static/{css,js}/index.<hash>.{css,js}``.

The ``<hash>`` ensures the correct asset versions are served when viewers return to your
site after upgrading the theme, and is reproducibly derived from ``src/**/*``,
``webpack.js``, and the ``dependencies`` and ``devDependencies``
in ``package.json``/``yarn.lock``.

Web fonts, and their supporting CSS, are copied into
``pydata_sphinx_theme/static/vendor/<font name>/<font version>/``. Including
the ``<font version>`` also ensures the correct assets are served when upgrading.

The links to these unique file names are captured as Jinja2 macros in
``pydata_sphinx_theme/static/webpack-macros.html``.

Finally, all of these files are committed to the repo, in-place, along with the
rest of the code. This allows use of the theme directly from a ``git`` checkout,
without any of the finicky web development dependencies, or even a ``nodejs``
runtime.

.. Hint::

    Theme development was inspired by the
    `ReadTheDocs Sphinx theme <https://github.com/readthedocs/sphinx_rtd_theme>`__.

Change fonts
============

Three "styles" of the `FontAwesome 5 Free <https://fontawesome.com/icons?m=free>`__
icon font are used for :ref:`icon links <icon-links>` and admonitions, and is
the only `vendored` font. Further font choices are described in the :ref:`customizing`
section of the user guide, and require some knowledge of HTML and CSS.

The remaining vendored font selection is:

- managed as a dependency in ``package.json``

  - allowing the version to be managed centrally

- copied directly into the site statics, including licenses

  - allowing the chosen font to be replaced (or removed entirely) with minimal
    templating changes: practically, changing the icon font is difficult at this
    point.

- partially preloaded

  - reducing flicker and re-layout artifacts of early icon renders

- mostly managed in ``webpack.js``

  - allowing upgrades to be handled in a relatively sane, manageable way, to
    ensure the most recent icons


Upgrade a font
--------------

If *only* the version of the `existing` font must change, for example to enable
new icons, run:

.. code-block:: bash

    yarn add <font name>@<version>
    yarn build:production

It *may* also be necessary to clear out old font versions from
``pydata_sphinx_theme/static/vendor/`` before committing.


Change a font
-------------

If the above doesn't work, for example if file names for an existing font change,
or a new font variant altogether is being added, hand-editing of ``webpack.js``
is required. The steps are roughly:

- install the new font, as above, with ``yarn add``
- in ``webpack.js``:

  - add the new font to ``vendorVersions`` and ``vendorPaths``
  - add new ``link`` tags to the appropriate macro in ``macroTemplate``
  - add the new font files (including the license) to ``CopyPlugin``
  - remove references to the font being replaced/removed, if applicable

- restart the development server, if running
- rebuild the production assets, as above, with ``yarn build:production``
- potentially remove the font being replaced from ``package.json`` and re-run ``yarn``
- commit all of the changed files


Workflow for contributing changes
=================================

We follow a `typical GitHub workflow <https://guides.github.com/introduction/flow/>`__
of:

- create a personal fork of this repo
- create a branch
- open a pull request
- fix findings of various linters and checks
- work through code review

For each pull request, the demo site is built and deployed to make it easier to review
the changes in the PR. To access this, click on the "ReadTheDocs" preview in the CI/CD jobs.


Automate code standards with pre-commit
=======================================

To ensure all source files have been correctly built, a `pre-commit <https://pre-commit.com/>`__ hook is available.

Pre-commit should be installed automatically by following the instructions in :ref:`basic-environment`.

After running ``pre-commit install``, the pre-commit checks will be run every time you make a commit to the repository.

- **To skip the pre-commit checks**, run the following command:

  .. code-block:: bash

      git commit --no-verify

- **To run pre-commit on all files**, run the following command:

  .. code-block:: bash

      pre-commit run --all-files

Accessibility checks
====================

The accessibility checking tools can find a number of common HTML patterns which
assistive technology can't help users understand.

In addition to `Lighthouse <https://developers.google.com/web/tools/lighthouse>`__
in CI, the ``pa11y`` stack is installed as part of the development environment.

The key components are:

- `pa11y <https://github.com/pa11y/pa11y>`__ which uses a headless browser to analyze
  an HTML page with a configurable set of rules based on publish standards
- `Pa11y-CI <https://github.com/pa11y/pa11y-ci>`__ runs ``pa11y`` on multiple pages
- `pa11y-reporter-html <https://github.com/pa11y/pa11y-reporter-html>`__ generates
  some nice HTML reports, suitable for review

.. Note::

    Presently, the *default* ``pa11y`` ruleset, ``WCAG2AA`` is used, a subset of
    the `Web Content Accessibility Guidelines <https://www.w3.org/TR/WCAG21>`__.
    The `Quick Reference <https://www.w3.org/WAI/WCAG21/quickref>`__ may provide
    lighter reading.

To run the accessibility problem finder locally:

.. code-block:: bash

    yarn build:production
    cd docs
    make html
    python a11y.py

The output of the last command includes:

- a short summary of the current state of the accessibility rules we are trying to maintain
- local paths to JSON and HTML reports which contain all of the issues found


Fixing accessibility errors
---------------------------

Start by checking for issues on the
`accessibility roadmap <https://github.com/pandas-dev/pydata-sphinx-theme/blob/master/docs/a11y-roadmap.txt>`__.
These are issues which are currently flagged by the toolset, but that have not yet
been fixed. If that file is empty (or just comments), hooray!

To start working on one of the accessibility roadmap items, comment out one of the
lines in `docs/a11y-roadmap.txt`, and re-run the audit to establish a baseline.

Then, fix the issue in either the HTML templates, CSS, or python code, and re-run
the audit until it is fixed.


Make a release
==============

This theme uses GitHub tags and releases to automatically push new releases to
PyPI. For information on this process, see `the release checklist <https://github.com/pydata/pydata-sphinx-theme/wiki/Release-checklist#release-instructions>`_.

.. meta::
    :description lang=en:
        How to become a contributor to the pydata-sphinx-theme.
