name: continuous-integration-tox

# Concurrency group that uses the workflow name and PR number if available
# or commit SHA as a fallback. If a new build is triggered under that
# concurrency group while a previous build is running it will be canceled.
# Repeated pushes to a PR will cancel all previous builds, while multiple
# merges to main will not cancel.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1" # Make tools pretty
  DEFAULT_PYTHON_VERSION: "3.12" # Default Python version to use
  OLDEST_SPHINX_VERSION: "61" # Oldest Sphinx version to test, without .

permissions: {}

on:
  push:
    branches:
      - main
      - trallard/* # allow for personal branches for debugging
  pull_request:
  workflow_call:
  # allow manual triggering of the workflow, while debugging
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository ðŸ›Ž"
        uses: actions/checkout@v4
      - name: "Setup CI environment ðŸ› "
        uses: ./.github/actions/set-dev-env
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: "Run lint checks ðŸ§¹"
        run: python -Im tox run -e lint

  # run our test suite on various combinations of OS / Python version
  run-pytest:
    needs: lint
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "macos-14", "windows-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        sphinx-version: [""]
        include:
          # oldest Python version with the oldest Sphinx version
          - os: ubuntu-latest
            python-version: "3.9"
            sphinx-version: ${{ env.OLDEST_SPHINX_VERSION }}
            # newest Python version with the newest Sphinx version
          - os: ubuntu-latest
            python-version: "3.12"
            sphinx-version: "dev"
        exclude:
          # Python 3.9 is not supported on macOS 14 - https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
          - os: macos-14
            python-version: "3.9"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository ðŸ›Ž"
        uses: actions/checkout@v4
      - name: "Setup CI environment ðŸ› "
        uses: ./.github/actions/set-dev-env
        with:
          python-version: ${{ matrix.python-version }}
          pandoc: "True"
      - name: "Run tests"
        shell: bash
        run: |
          if [ -n "${{matrix.sphinx-version}}" ]; then
            python -Im tox run -f py$(echo ${{ matrix.python-version }} | tr -d .)-sphinx${{matrix.sphinx-version}}
          else
            python -Im tox run -f py$(echo ${{ matrix.python-version }} | tr -d .)
          fi

  # Only run accessibility tests on the latest Python version (3.12) and Ubuntu
  a11y-tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository ðŸ›Ž"
        uses: actions/checkout@v4
      - name: "Setup CI environment ðŸ› "
        uses: ./.github/actions/set-dev-env
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: "Run accessibility tests with playwright ðŸŽ­"
        run: python -Im tox run -e a11y
        continue-on-error: true

  # Build sites on the 2 major OSes and check for warnings
  build-site:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
        sphinx-version: [""]
        include:
          - os: ubuntu-latest
            python-version: "3.9"
            sphinx-version: ${{ env.OLDEST_SPHINX_VERSION }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout repository ðŸ›Ž"
        uses: actions/checkout@v4
      - name: "Setup CI environment ðŸ› "
        uses: ./.github/actions/set-dev-env
        with:
          python-version: ${{ matrix.python-version }}
          pandoc: "True"
      - name: "Build docs and check for warnings"
        run: python -Im tox run -e docs
          if [ -n "${{matrix.sphinx-version}}" ]; then
          python -Im tox run -f docs-py$(echo ${{ matrix.python-version }} | tr -d .)-sphinx${{matrix.sphinx-version}}
          else
          python -Im tox run -f docs-py$(echo ${{ matrix.python-version }} | tr -d .)
          fi

  # Run Lighthouse audits on the built site (Ubuntu)
  lighthouse-audit:
    needs: build-site
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository ðŸ›Ž"
        uses: actions/checkout@v4
      - name: "Setup CI environment ðŸ› "
        uses: ./.github/actions/set-dev-env
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: "Run Lighthouse audits on the built site"
        run: python -Im tox run -e lighthouse
      - name: "Copy kitchen sink to a tiny site"
        run: |
          mkdir audit/
          mkdir audit/site
          cp -r docs/examples/kitchen-sink audit/site/kitchen-sink
          printf "Test\n====\n\n.. toctree::\n\n   kitchen-sink/index\n" > audit/site/index.rst
          echo 'html_theme = "pydata_sphinx_theme"' > audit/site/conf.py
          echo '.. toctree::\n   :glob:\n\n   *' >> audit/site/index.rst
          python -Im tox run -e docs-no-checks
      - name: "Audit with Lighthouse ðŸ”¦"
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: ".github/workflows/lighthouserc.json"
          temporaryPublicStorage: true
          uploadArtifacts: true
          runs: 3 # Multiple runs to reduce variance
