name: continuous-integration

# This prevents workflows from being run twice on PRs
# ref: https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662
on:
  push:
    branches:
      - main
  pull_request:
  workflow_call:

env:
  COVERAGE_THRESHOLD: 60
  DEFAULT_PY_VERSION: "3.9" # for the jobs that don't use a matrix

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PY_VERSION }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - uses: pre-commit/action@v3.0.0

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        include:
          - os: macos-latest
            python-version: ${{ env.DEFAULT_PY_VERSION }}
          - os: windows-latest
            python-version: ${{ env.DEFAULT_PY_VERSION }}

    steps:
      - name: Set up Python ${{ matrix.python-version }}
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -e .[coverage]

      - name: Show installed versions
        run: python -m pip list

      - name: Build docs
        run: sphinx-build -b html docs/ docs/_build/html --keep-going -w warnings.txt

      - name: Check for unexpected Sphinx warnings
        if: matrix.python-version == ${{ env.DEFAULT_PY_VERSION }}
        run: python tests/check_warnings.py

      - name: Run tests
        run: pytest --color=yes --cov pydata_sphinx_theme --cov-branch --cov-report term-missing:skip-covered --cov-fail-under ${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage
        if: success() || failure() # always run, unless manually cancelled
        run: codecov

  # Run local Lighthouse audit against built site
  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python ${{ env.DEFAULT_PY_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PY_VERSION }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -e .[coverage]

      # We want to run the audit on a simplified documentation build so that
      # the audit results aren't affected by non-theme things like extensions.
      # Here we copy over just the kitchen sink into an empty docs site with
      # only the theme loaded so extensions don't play a role in audit scores.
      - name: Copy kitchen sink to a tiny site and build it
        run: |
          mkdir audit/
          mkdir audit/site
          cp -r docs/examples/kitchen-sink audit/site/kitchen-sink
          printf "Test\n====\n\n.. toctree::\n\n   kitchen-sink/index\n" > audit/site/index.rst
          echo 'html_theme = "pydata_sphinx_theme"' > audit/site/conf.py
          echo '.. toctree::\n   :glob:\n\n   *' >> audit/site/index.rst
          sphinx-build audit/site audit/_build

      # The lighthouse audit runs directly on the HTML files, no serving needed
      - name: Audit with Lighthouse
      - uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: ".github/workflows/lighthouserc.json"
          temporaryPublicStorage: true
          uploadArtifacts: true
          runs: 3 # Multiple runs to reduce variance

  # Generate a profile of the code and upload as an artifact
  profile:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.DEFAULT_PY_VERSION }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PY_VERSION }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools nox

      - name: Generate a profile
        run: |
          nox -s profile
        continue-on-error: true

      - uses: actions/upload-artifact@v3
        with:
          name: profile-results
          path: profile.svg
