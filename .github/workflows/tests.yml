name: continuous-integration

on: [push, pull_request]

env:
  COVERAGE_THRESHOLD: 60

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  # Build docs on a number of Python versions. In the future this can be
  # where tests go.
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7, 3.8, 3.9, "3.10"]
        # Manually specify one OSX + Windows build to make sure it works there.
        include:
          - python-version: "3.10"
            dev: true
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .[coverage]

      - name: Install pre-release dependencies
        if: ${{ matrix.dev }}
        run: pip install --upgrade --pre sphinx jinja2

      # Build the docs
      - name: Build docs to store
        run: |
          sphinx-build -b html docs/ docs/_build/html -W --keep-going

      # Run tests under coverage
      - name: Run the tests
        run: pytest --cov pydata_sphinx_theme --cov-branch --cov-report term-missing:skip-covered --cov-fail-under ${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage
        if: ${{ always() }}
        run: codecov

  # Run local Lighthouse audit against built site
  audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    env:
      PORT: 8000
      # the host interface to listen on, might need to be 0.0.0.0
      HOST: 127.0.0.1
      # the base url
      URL: http://127.0.0.1:8000
      PA11Y_BUILD: /tmp/pa11y/pa11y-${{ github.run_number }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - name: Set up Node/yarn
        uses: actions/setup-node@v1
        with:
          node-version: "16.x"

      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: "node_modules"
          key: |
            ${{ runner.os }}-node-modules-${{ hashFiles('package.json') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          python -m pip install -e .[coverage]
          yarn --frozen-lockfile

      # Build the docs
      - name: Build docs to store
        run: |
          sphinx-build -b html docs/ docs/_build/html -W --keep-going

      # Serve the docs and wait to be ready
      - name: Serve the built site
        run: |
          nohup python docs/serve.py --port=${PORT} --host=${HOST} &
          curl --retry 10 --retry-connrefused --retry-max-time 60 ${URL}/index.html

      # Run the audit
      # TODO: use the hosted API with a secret? would allow for comparison over time...
      - name: Make folder for Lighthouse reports
        run: mkdir -p /tmp/lighthouse/lighthouse-${{ github.run_number }}

      - name: Run Lighthouse on Site
        id: lighthouse
        uses: foo-software/lighthouse-check-action@v2.0.0
        with:
          # TODO: generate this list to audit all html pages
          urls: >-
            ${{ env.URL }}/index.html,
            ${{ env.URL }}/demo/api.html,
            ${{ env.URL }}/demo/demo.html,
            ${{ env.URL }}/demo/example_pandas.html,
            ${{ env.URL }}/user_guide/accessibility.html
          outputDirectory: /tmp/lighthouse/lighthouse-${{ github.run_number }}
          verbose: true

      - name: Run the accessibility audit
        run: python docs/scripts/a11y.py --no-serve

      # Check the audit for threshold values
      # TODO: write this someplace after a PR is merged, and load?
      - name: Assess Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@v1.0.1
        with:
          lighthouseCheckResults: ${{ steps.lighthouse.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "96"
          minBestPracticesScore: "85"
          minPerformanceScore: "10"
          minSeoScore: "80"
        if: always()

      - name: Publish Audit reports
        uses: actions/upload-artifact@v2
        with:
          name: Pa11y and Lighthouse ${{ github.run_number }}
          path: |
            /tmp/pa11y
            /tmp/lighthouse
        if: always()

  publish:
    name: Publish to PyPI
    needs: [lint, tests]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Build package
        run: |
          python -m pip install -U pip build
          python -m build
      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_KEY }}
