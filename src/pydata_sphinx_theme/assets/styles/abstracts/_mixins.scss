/*********************************************
* SASS Mixins
*********************************************/

// loading the math module
@use "sass:math";

/**
 * A consistent box shadow style we apply across elements.
 */
@mixin box-shadow() {
  box-shadow: 0 0.2rem 0.5rem var(--pst-color-shadow),
    0 0 0.0625rem var(--pst-color-shadow) !important;
}

/**
 * set background color from a color variable
 */
@mixin background-from-color-variable($color-variable) {
  &:before {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    background-color: var(#{$color-variable});
    z-index: -1;
    // So that hovering over the text within background is still possible.
    // Otherwise the background overlays the text and you cannot click or select easily.
    // ref: https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
    pointer-events: none;
  }
}

/**
 * Set background of some cell outputs to white-ish to make sure colors work
 * This is because many libraries make output that only looks good on white
 */
@mixin cell-output-background {
  color: var(--pst-color-on-background);
  background-color: var(--pst-color-text-base);
  border-radius: 0.25rem;
  padding: 0.5rem;
}

/**
* Function to get items from nested maps
*/
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetc
// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/**
* Function to check if the color needs converting to a "color" type
* if it is a string we cannot use other color manipulation functions
* It is used to create the sphinx-design colours as these are often interpolated
*/
// @param {String/Color} $color - Color definition from map
// @return {Color} - Color type (in hex)
@function check-color($color) {
  @if type-of($color) == string {
    $color: from-hex($color);
  }
  @return $color;
}

/**
* Function to convert the string representation of a color to a color type (hex)
*/
// @param {String} $string - String representation of a color
@function from-hex($string) {
  $string-lower: to-lower-case($string);
  $r: "";
  $g: "";
  $b: "";
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $length: str-length($string);
  $max: if($length == 4, 1, 2);

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: str-slice($string-lower, $i, $i);

    // If wrong character, return
    @if index($hex, $c) == null {
      @return $string;
    }

    @if str-length($r) < $max {
      $r: $r + $c;
    } @else if str-length($g) < $max {
      $g: $g + $c;
    } @else if str-length($b) < $max {
      $b: $b + $c;
    }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));
}

@function _hex-to-dec($string) {
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $string: to-lower-case($string);
  $length: str-length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: index($hex, str-slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

/**
* Get color combinations that meet a minimum contrast ratio as per WCAG 2
*/
// @param {color} $bg - Background color of the element
// @param {color} optional $target-color-contrast-dark $target-color-contrast-light  - Target text colors, defaul to our
// $foundation-black and $foundation-white colors
// @return {color} $max-ratio-color - The color that has the highest contrast ratio
@function a11y-combination(
  $bg,
  $target-color-contrast-dark: $foundation-black,
  $target-color-contrast-light: $foundation-white,
  $min-contrast-ratio: $min-contrast-ratio-4
) {
  // will test against the specified foreground colors
  $foregrounds: $target-color-contrast-light, $target-color-contrast-dark;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $fg in $foregrounds {
    $contrast-ratio: get-contrast-ratio($bg, $fg);
    @if $contrast-ratio >= $min-contrast-ratio {
      @return $fg;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $fg;
    }
  }
  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$bg}...";

  @return $max-ratio-color;
}

@function get-contrast-ratio($bg, $foreground) {
  $l1: luminance($bg);
  $l2: luminance($foreground);

  // return the relative contrast ratio
  @if $l1 > $l2 {
    @return math.div(($l1 + 0.05), ($l2 + 0.05));
  } @else {
    @return math.div(($l2 + 0.05), ($l1 + 0.05));
  }
}

// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio

@function luminance($target-color) {
  $rgb-col: (
    "r": red($target-color),
    "g": green($target-color),
    "b": blue($target-color),
  );

  @each $channel, $value in $rgb-col {
    // here we get RsRGB, GsRGB, and BsRGB
    @if math.div($value, 255) <=0.03928 {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel: math.div(math.div($value, 255), 12.92),
        )
      );
    } @else {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel:
            math.pow(math.div((math.div($value, 255) + 0.055), 1.055), 2.4),
        )
      );
    }
  }

  @return (
    0.2126 * map-get($rgb-col, "r") + 0.7152 * map-get($rgb-col, "g") + 0.0722 *
      map-get($rgb-col, "b")
  );
}
