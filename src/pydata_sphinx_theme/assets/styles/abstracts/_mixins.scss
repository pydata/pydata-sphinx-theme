/*********************************************
* SASS Mixins
*********************************************/

/**
* Scrollbars should be thinner and slightly rounded, with a grey background
* ref: https://www.nngroup.com/articles/scrolling-and-scrollbars/
*/
@mixin scrollbar-style() {
  &::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }

  &::-webkit-scrollbar-thumb {
    background: var(--pst-color-text-muted);
    border-radius: 0.25rem;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: var(--pst-color-on-surface);
  }

  // Hovering behavior for the scrollbar
  // Include both hovering on the parent and on the thumb in case thumb is outside parent
  &:hover {
    &::-webkit-scrollbar-thumb {
      background: var(--pst-color-text-muted);
    }
  }

  &::-webkit-scrollbar-thumb:hover {
    background: var(--pst-color-text-muted);
  }
}

/**
 * A consistent box shadow style we apply across elements.
 */
@mixin box-shadow() {
  box-shadow: 0 0.2rem 0.5rem var(--pst-color-shadow),
    0 0 0.0625rem var(--pst-color-shadow) !important;
}

/**
 * create a low opacity background behind object using our variable colors
 */
@mixin background-from-color-variable($color-variable, $opacity: 0.1) {
  // This is a hack to create a light background with controlled opacity
  // using our css color variables
  // ref: https://stackoverflow.com/a/56951626/6734243

  &:before {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
    background-color: var(#{$color-variable});
    opacity: $opacity;

    // So that hovering over the text within background is still possible.
    // Otherwise the background overlays the text and you cannot click or select easily.
    // ref: https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
    pointer-events: none;
  }
}

/**
 * Format before pseudo element - TODO: decide if we still need this
 */
@mixin format-before($color-variable) {
  &:before {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;

    // So that hovering over the text within background is still possible.
    // Otherwise the background overlays the text and you cannot click or select easily.
    // ref: https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
    pointer-events: none;
  }
}

/**
 * Set background of some cell outputs to white-ish to make sure colors work
 * This is because many libraries make output that only looks good on white
 */
@mixin cell-output-background {
  color: var(--pst-color-on-background);
  background-color: var(--pst-color-text-base);
  border-radius: 0.25rem;
  padding: 0.5rem;
}

/**
* Function to get items from nested maps
*/
// @param {Map} $map - Map
// @param {Arglist} $keys - Keys to fetc
// @return {*}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/**
* Function to convert the string represenation of a color to a color type
*/
// @param {String} $string - String representation of a color
@function from-hex($string) {
  $string-lower: to-lower-case($string);
  $r: "";
  $g: "";
  $b: "";
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $length: str-length($string);
  $max: if($length == 4, 1, 2);

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: str-slice($string-lower, $i, $i);

    // If wrong character, return
    @if index($hex, $c) == null {
      @return $string;
    }

    @if str-length($r) < $max {
      $r: $r + $c;
    } @else if str-length($g) < $max {
      $g: $g + $c;
    } @else if str-length($b) < $max {
      $b: $b + $c;
    }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(_hex-to-dec($r), _hex-to-dec($g), _hex-to-dec($b));
}

@function _hex-to-dec($string) {
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $string: to-lower-case($string);
  $length: str-length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + (15 * ($length - $i));
    $index: index($hex, str-slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
$_luminance-list: 0.0008 0.001 0.0011 0.0013 0.0015 0.0017 0.002 0.0022 0.0025
  0.0027 0.003 0.0033 0.0037 0.004 0.0044 0.0048 0.0052 0.0056 0.006 0.0065
  0.007 0.0075 0.008 0.0086 0.0091 0.0097 0.0103 0.011 0.0116 0.0123 0.013
  0.0137 0.0144 0.0152 0.016 0.0168 0.0176 0.0185 0.0194 0.0203 0.0212 0.0222
  0.0232 0.0242 0.0252 0.0262 0.0273 0.0284 0.0296 0.0307 0.0319 0.0331 0.0343
  0.0356 0.0369 0.0382 0.0395 0.0409 0.0423 0.0437 0.0452 0.0467 0.0482 0.0497
  0.0513 0.0529 0.0545 0.0561 0.0578 0.0595 0.0612 0.063 0.0648 0.0666 0.0685
  0.0704 0.0723 0.0742 0.0762 0.0782 0.0802 0.0823 0.0844 0.0865 0.0887 0.0908
  0.0931 0.0953 0.0976 0.0999 0.1022 0.1046 0.107 0.1095 0.1119 0.1144 0.117
  0.1195 0.1221 0.1248 0.1274 0.1301 0.1329 0.1356 0.1384 0.1413 0.1441 0.147
  0.15 0.1529 0.1559 0.159 0.162 0.1651 0.1683 0.1714 0.1746 0.1779 0.1812
  0.1845 0.1878 0.1912 0.1946 0.1981 0.2016 0.2051 0.2086 0.2122 0.2159 0.2195
  0.2232 0.227 0.2307 0.2346 0.2384 0.2423 0.2462 0.2502 0.2542 0.2582 0.2623
  0.2664 0.2705 0.2747 0.2789 0.2831 0.2874 0.2918 0.2961 0.3005 0.305 0.3095
  0.314 0.3185 0.3231 0.3278 0.3325 0.3372 0.3419 0.3467 0.3515 0.3564 0.3613
  0.3663 0.3712 0.3763 0.3813 0.3864 0.3916 0.3968 0.402 0.4072 0.4125 0.4179
  0.4233 0.4287 0.4342 0.4397 0.4452 0.4508 0.4564 0.4621 0.4678 0.4735 0.4793
  0.4851 0.491 0.4969 0.5029 0.5089 0.5149 0.521 0.5271 0.5333 0.5395 0.5457
  0.552 0.5583 0.5647 0.5711 0.5776 0.5841 0.5906 0.5972 0.6038 0.6105 0.6172
  0.624 0.6308 0.6376 0.6445 0.6514 0.6584 0.6654 0.6724 0.6795 0.6867 0.6939
  0.7011 0.7084 0.7157 0.7231 0.7305 0.7379 0.7454 0.7529 0.7605 0.7682 0.7758
  0.7835 0.7913 0.7991 0.807 0.8148 0.8228 0.8308 0.8388 0.8469 0.855 0.8632
  0.8714 0.8796 0.8879 0.8963 0.9047 0.9131 0.9216 0.9301 0.9387 0.9473 0.956
  0.9647 0.9734 0.9823 0.9911 1;

@function a11y-combination(
  $bg,
  $target-color-contrast-dark: $foundation-black,
  $target-color-contrast-white: $foundation-white,
  $min-contrast-ratio: $min-contrast-ratio-4
) {
  // will test against the specified foreground colors
  $foregrounds: $target-color-contrast-white, $target-color-contrast-dark;
  $max-ratio: 0;
  $max-ratio-color: null;

  @debug "Using AA #{$min-contrast-ratio}:1 contrast ratio for #{$bg} ♿️";
  @each $fg in $foregrounds {
    $contrast-ratio: get-contrast-ratio($bg, $fg);
    @if $contrast-ratio >= $min-contrast-ratio {
      @return $fg;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $fg;
    }
  }
  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$bg}...";

  @return $max-ratio-color;
}

@function get-contrast-ratio($bg, $foreground: #ced6dd) {
  $l1: luminance($bg);
  $l2: luminance($foreground);

  // return the relative contrast ratio
  @if $l1 > $l2 {
    @return ($l1 + 0.05) / ($l2 + 0.05);
  } @else {
    @return ($l2 + 0.05) / ($l1 + 0.05);
  }
}

// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio

@function luminance($target-color) {
  $rgb-col: (
    "r": red($target-color),
    "g": green($target-color),
    "b": blue($target-color),
  );

  @each $channel, $value in $rgb-col {
    // here we get RsRGB, GsRGB, and BsRGB
    @if $value / 255 <=0.03928 {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel: $value / 255 / 12.92,
        )
      );
    } @else {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel: nth($_luminance-list, $value + 1),
        )
      );
    }
  }

  @return (
    0.2126 * map-get($rgb-col, "r") + 0.7152 * map-get($rgb-col, "g") + 0.0722 *
      map-get($rgb-col, "b")
  );
}
