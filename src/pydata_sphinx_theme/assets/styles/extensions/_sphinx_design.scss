/*******************************************************************************
 * Special-cases for the sphinx-design library, mainly to make it compatible
 * with the dark/light themes of pydata-sphinx-theme.
 *
 * NOTE: sphinx-design uses !important quite liberally, so here we must do the
 * same for our overrides to have any effect.
 */

@use "../variables/color" as *;
@use "sass:color" as color;

/*******************************************************************************
  * Color and variables
  *
  * This is a list of the semantic color names from sphinx-design (we only
  * need to override variables that sphinx-design has actually defined).
  * https://github.com/executablebooks/sphinx-design/blob/9226a12a/style/_colors.scss#L31-L43
  */
$sd-semantic-color-names: (
  "primary",
  "secondary",
  "success",
  "info",
  "warning",
  "danger",
  "light",
  "muted",
  "dark",
  "black",
  "white"
);

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
$_luminance-list: 0.0008 0.001 0.0011 0.0013 0.0015 0.0017 0.002 0.0022 0.0025
  0.0027 0.003 0.0033 0.0037 0.004 0.0044 0.0048 0.0052 0.0056 0.006 0.0065
  0.007 0.0075 0.008 0.0086 0.0091 0.0097 0.0103 0.011 0.0116 0.0123 0.013
  0.0137 0.0144 0.0152 0.016 0.0168 0.0176 0.0185 0.0194 0.0203 0.0212 0.0222
  0.0232 0.0242 0.0252 0.0262 0.0273 0.0284 0.0296 0.0307 0.0319 0.0331 0.0343
  0.0356 0.0369 0.0382 0.0395 0.0409 0.0423 0.0437 0.0452 0.0467 0.0482 0.0497
  0.0513 0.0529 0.0545 0.0561 0.0578 0.0595 0.0612 0.063 0.0648 0.0666 0.0685
  0.0704 0.0723 0.0742 0.0762 0.0782 0.0802 0.0823 0.0844 0.0865 0.0887 0.0908
  0.0931 0.0953 0.0976 0.0999 0.1022 0.1046 0.107 0.1095 0.1119 0.1144 0.117
  0.1195 0.1221 0.1248 0.1274 0.1301 0.1329 0.1356 0.1384 0.1413 0.1441 0.147
  0.15 0.1529 0.1559 0.159 0.162 0.1651 0.1683 0.1714 0.1746 0.1779 0.1812
  0.1845 0.1878 0.1912 0.1946 0.1981 0.2016 0.2051 0.2086 0.2122 0.2159 0.2195
  0.2232 0.227 0.2307 0.2346 0.2384 0.2423 0.2462 0.2502 0.2542 0.2582 0.2623
  0.2664 0.2705 0.2747 0.2789 0.2831 0.2874 0.2918 0.2961 0.3005 0.305 0.3095
  0.314 0.3185 0.3231 0.3278 0.3325 0.3372 0.3419 0.3467 0.3515 0.3564 0.3613
  0.3663 0.3712 0.3763 0.3813 0.3864 0.3916 0.3968 0.402 0.4072 0.4125 0.4179
  0.4233 0.4287 0.4342 0.4397 0.4452 0.4508 0.4564 0.4621 0.4678 0.4735 0.4793
  0.4851 0.491 0.4969 0.5029 0.5089 0.5149 0.521 0.5271 0.5333 0.5395 0.5457
  0.552 0.5583 0.5647 0.5711 0.5776 0.5841 0.5906 0.5972 0.6038 0.6105 0.6172
  0.624 0.6308 0.6376 0.6445 0.6514 0.6584 0.6654 0.6724 0.6795 0.6867 0.6939
  0.7011 0.7084 0.7157 0.7231 0.7305 0.7379 0.7454 0.7529 0.7605 0.7682 0.7758
  0.7835 0.7913 0.7991 0.807 0.8148 0.8228 0.8308 0.8388 0.8469 0.855 0.8632
  0.8714 0.8796 0.8879 0.8963 0.9047 0.9131 0.9216 0.9301 0.9387 0.9473 0.956
  0.9647 0.9734 0.9823 0.9911 1;

@function a11y-combination(
  $bg,
  $target-color-contrast-dark: $foundation-black,
  $target-color-contrast-light: $base-light-text,
  $target-color-contrast-white: $foundation-white,
  $min-contrast-ratio: $min-contrast-ratio
) {
  // will test against our two base foreground colors
  $foregrounds: $target-color-contrast-light, $target-color-contrast-dark;
  $max-ratio: 0;
  $max-ratio-color: null;

  @debug "Using AA #{$min-contrast-ratio}:1 contrast ratio for #{$bg} ♿️";
  @each $fg in $foregrounds {
    $contrast-ratio: get-contrast-ratio($bg, $fg);
    @debug "Contrast ratio for #{$bg} and #{$fg} is #{$contrast-ratio}... 🔴";
    @if $contrast-ratio >= $min-contrast-ratio {
      @return $fg;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $fg;
    }
  }
  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$bg}...";

  @return $max-ratio-color;
}

@function get-contrast-ratio($bg, $foreground: #ced6dd) {
  @debug "Calculating contrast ratio for #{$bg} 💡";
  $l1: luminance($bg);
  $l2: luminance($foreground);

  // return the relative contrast ratio
  @if $l1 > $l2 {
    @return ($l1 + 0.05) / ($l2 + 0.05);
  } @else {
    @return ($l2 + 0.05) / ($l1 + 0.05);
  }
}

// Return WCAG2.1 relative luminance
// See https://www.w3.org/TR/WCAG/#dfn-relative-luminance
// See https://www.w3.org/TR/WCAG/#dfn-contrast-ratio

@function luminance($target-color) {
  @debug "Calculating luminance for #{$target-color}";
  $rgb-col: (
    "r": red($target-color),
    "g": green($target-color),
    "b": blue($target-color),
  );

  @each $channel, $value in $rgb-col {
    // here we get RsRGB, GsRGB, and BsRGB
    @if $value / 255 <=0.03928 {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel: (
            $value / 255,
          ) /
          12.92,
        )
      );
    } @else {
      $rgb-col: map-merge(
        $rgb-col,
        (
          $channel: nth($_luminance-list, $value + 1),
        )
      );
    }
  }

  @return (
    0.2126 * map-get($rgb-col, "r") + 0.7152 * map-get($rgb-col, "g") + 0.0722 *
      map-get($rgb-col, "b")
  );
}

/**
  * Here we create some extra --pst-color-* variables and use
  * them to override the value of the corresponding sphinx-design variables.
  * This is easier than re-writing the sphinx-design rules. Even easier would be
  * directly assigning our values to the --sd-color-* variables, but then our
  * downstream users couldn't override *our* colors and have it affect buttons
  * and badges.
  *
  * First, define the extra keys needed to cover the full range of semantic
  * color names used in sphinx-design, then merge them with the names we
  * already define for our own needs.
  */
$extra-semantic-colors: (
  "dark": map-get($pst-semantic-colors, "text-base"),
  "muted": map-get($pst-semantic-colors, "text-muted"),
  "light": $foundation-light-grey,
  "black": $foundation-black,
  "white": $foundation-white,
);

$all-colors: map-merge($pst-semantic-colors, $extra-semantic-colors);

// Now we override the --sd-color-* variables.
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    @each $name in $sd-semantic-color-names {
      // check if this color is defined differently for light/dark
      $value: map-get($all-colors, $name);
      @debug "Using #{$name}: #{$value} 🔴";
      @if type-of($value) == map {
        $value: #{map-get($value, $mode)};
        @debug "Using #{$mode} for #{$name}: #{$value}";
      }
      // define the pst variables, so that downstream user overrides will work
      --pst-color-#{$name}: #{$value};
      // TODO: the text might be best set in the component itself
      // --pst-color-#{$name}-text: #{a11y-combination($value)};
      // // TODO: check where highlight is used
      // --pst-color-#{$name}-highlight: #{darken(#{$value}, 15%)};
      // // override the sphinx-design variables
      --sd-color-#{$name}: var(--pst-color-#{$name});
      // --sd-color-#{$name}-text: var(--pst-color-#{$name}-text);
      // TODO: check where highlight is used
      // --sd-color-#{$name}-highlight: var(--pst-color-#{$name}-highlight);
    }
  }
}

// Make sure the color border variables are set using our variables
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    --sd-color-card-border: var(--pst-color-border);
  }
}

/*******************************************************************************
  * shadows
  */
html[data-theme="light"] {
  .sd-shadow-xs,
  .sd-shadow-sm,
  .sd-shadow-md,
  .sd-shadow-lg {
    @include box-shadow();
  }
}

/*******************************************************************************
  * cards
  */

.bd-content .sd-card {
  border: 1px solid var(--pst-color-border);

  .sd-card-header {
    background-color: var(--pst-color-panel-background);
    border-bottom: 1px solid var(--pst-color-border);
  }
  .sd-card-footer {
    background-color: var(--pst-color-panel-background);
    border-top: 1px solid var(--pst-color-border);
  }

  .sd-card-body {
    background-color: var(--pst-color-panel-background);
  }
}
/*******************************************************************************
  * tabs
  */

.bd-content .sd-tab-set {
  > input {
    // Active tab label
    &:checked + label {
      border-color: var(--pst-color-primary);
      color: var(--pst-color-primary);
    }

    // hover label
    &:not(:checked) + label:hover {
      border-color: var(--pst-color-primary);
      color: var(--pst-color-primary);
      opacity: 0.5;
    }
  }

  // Tab label
  > label {
    color: var(--pst-color-text-muted);

    // Hovered label
    html &:hover {
      color: var(--pst-color-primary);
      border-color: var(--pst-color-primary);
      opacity: 0.5;
    }
  }
}

/*******************************************************************************
  * Dropdowns
  */
details.sd-dropdown {
  // Remove all borders to over-ride SD behavior, and we'll add our own later
  border: 0px !important;
  summary.sd-card-header {
    border: 0 !important;
    & + div.sd-summary-content {
      border: 0;
    }
  }

  // Drop shadow should behave same as admonitions
  @include box-shadow();

  // Header is where the "clickable" box goes
  summary.sd-card-header {
    display: flex;
    align-items: center;
    position: relative; // So background color works
    font-weight: 600;
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    color: var(--pst-color-text) !important;

    // Set a variable that we can re-use for colors later
    // We must set this in the current and content sibling container
    // so that it is defined in both places
    --pst-sd-dropdown-color: var(--sd-color-card-border);
    & + div.sd-summary-content {
      --pst-sd-dropdown-color: var(--sd-color-card-border);
    }
    @each $name in $sd-semantic-color-names {
      &.sd-bg-#{$name} {
        --pst-sd-dropdown-color: var(--sd-color-#{$name});
        // Otherwise it won't be defined in the sibling element
        & + div.sd-summary-content {
          --pst-sd-dropdown-color: var(--sd-color-#{$name});
        }
      }
    }

    // Background color and border are grey by default
    background-color: unset !important;
    @include background-from-color-variable(--pst-sd-dropdown-color);

    // Add a left border with the same structure as our admonitions
    border-left: 0.2rem solid var(--pst-sd-dropdown-color) !important;
    & + div.sd-summary-content {
      border-left: 0.2rem solid var(--pst-sd-dropdown-color) !important;
      border-bottom-left-radius: calc(0.25rem - 1px);
    }

    span.sd-summary-icon {
      display: inline-flex;
      align-items: center;
      color: var(--pst-sd-dropdown-color) !important;
    }

    // Positioning of the caret
    .sd-summary-up,
    .sd-summary-down {
      top: 0.7rem;
    }
  }
}
