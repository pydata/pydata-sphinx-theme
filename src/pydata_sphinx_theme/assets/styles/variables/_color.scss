/*******************************************************************************
* master color map. Only the colors that actually differ between light and dark
* themes are specified separately.
*
*/

/* PyData theme - adaptive color scheme */
/* These are the base colors for the PyData Sphinx theme */
$theme-colors: (
  // Primary color
  "light-blue":
    (
      "50": #f4fbfc,
      "100": #e9f6f8,
      "200": #d0ecf1,
      "300": #abdde6,
      "400": #3fb1c5,
      "500": #0a7d91,
      "600": #085d6c,
      "700": #064752,
      "800": #042c33,
      "900": #021b1f,
    ),
  // Secondary color
  "violet":
    (
      "50": #fbf8fe,
      "100": #f6f2fe,
      "200": #ece3fc,
      "300": #decdfa,
      "400": #b691f5,
      "500": #894def,
      "600": #6730c5,
      "700": #4e2595,
      "800": #31175f,
      "900": #1e0e39,
    ),
  // Neutrals
  "gray":
    (
      "50": #f9f9fa,
      "100": #f3f4f5,
      "200": #e5e7ea,
      "300": #d1d5da,
      "400": #9ca4af,
      "500": #677384,
      "600": #48566b,
      "700": #364150,
      "800": #222832,
      "900": #14181e,
    ),
  // Accent color
  "pink":
    (
      "50": #fcf8fd,
      "100": #fcf0fa,
      "200": #f8dff5,
      "300": #f3c7ee,
      "400": #e47fd7,
      "500": #c132af,
      "600": #912583,
      "700": #6e1c64,
      "800": #46123f,
      "900": #2b0b27,
    )
);

:root {
  @each $group-color, $color in $theme-colors {
    @each $color-name, $value in $color {
      --pst-#{$group-color}-#{$color-name}: #{$value};
    }
  }
  // Foundation colors
  --pst-color-white: #ffffff;
  --pst-color-black: var(--pst-gray-900);
}

$pst-semantic-colors: (
  "primary": (
    light: var(--pst-light-blue-500),
    dark: var(--pst-light-blue-400),
  ),
  "secondary": (
    light: var(--pst-violet-500),
    dark: var(--pst-violet-400),
  ),
  "info": (
    "light": #276be9,
    "light-bg": #eff4fd,
    "dark": #79a3f2,
    "dark-bg": #06245d,
  ),
  "warning": (
    "light": #f66a0a,
    "light-bg": #fff8f2,
    "dark": #ff9245,
    "dark-bg": #652a02,
  ),
  "success": (
    "light": #00843f,
    "light-bg": #ecf6f1,
    "dark": #5fb488,
    "dark-bg": #002f17,
  ),
  "attention": (
    "light": #f66a0a,
    "light-bg": #fff8f2,
    "dark": #ff9245,
    "dark-bg": #652a02,
  ),
  "danger": (
    "light": #d72d47,
    "light-bg": #fcf1f2,
    "dark": #e78894,
    "dark-bg": #4e111b,
  ),
  "text-base": (
    "light": var(--pst-gray-800),
    // "dark": #e5e7ea
    "dark": #ced6dd,
    // gray-100
  ),
  "text-muted": (
    "light": var(--pst-gray-600),
    "dark": var(--pst-gray-300),
  ),
  // TODO - update
  "shadow":
    (
      // "light": rgb(216, 216, 216),
      "light": rgba(0, 0, 0, 0.1),
      "dark": rgba(0, 0, 0, 0.2),
    ),
  // TODO- update (need muted and regular - this is muted)
  "border":
    (
      "light": rgba(23, 23, 26, 0.2),
      "dark": #48566b,
    ),
  "inline-code": (
    "light": var(--pydata-pink-400),
    "dark": var(--pydata-pink-500),
  ),
  // TODO - update
  "target":
    (
      "light": rgb(251, 229, 78),
      "dark": rgb(71, 39, 0),
    ),
  // DEPTH COLORS
  // background: color of the canvas / the furthest back layer
  "background":
    (
      "light": var(--pst-color-white),
      "dark": var(--pst-color-black),
    ),
  // on-background: provides slight contrast against background
  // (by use of shadows in light theme)
  "on-background":
    (
      "light": var(--pst-color-white),
      "dark": var(--pst-color-gray-800),
    ),
  // surface: object set above the background (without shadows)
  // Uses JupyterLab cell background colors in light/dark theme
  "surface":
    (
      "light": var(--pst-gray-100),
      "dark": var(--pst-gray-700),
    ),
  // on_surface: object on top of surface object (without shadows)
  //TODO - update
  "on-surface":
    (
      "light": rgb(225, 225, 225),
      "dark": rgb(55, 55, 55),
    ),
);

@mixin create-color-var($key, $value, $identifier: "") {
  //$identifier is an optional variable - used for the new system
  @if $identifier != "" {
    --pst-color-#{$key}-#{$identifier}: #{$value};
  } @else {
    --pst-color-#{$key}: #{$value};
  }
}

@mixin theme-colors($mode) {
  @each $name, $value in $pst-semantic-colors {
    // check if there is a map (i.e. multiple light/dark definitions)
    @if type-of($value) == map {
      // support for single light/dark colour definitions
      @if map-has-key($value, $mode) {
        $value: map-get($value, $mode);
        @include create-color-var($name, $value);
      } // support for multiple light/dark colour definitions - as our new design system
      @else {
        @each $key, $val in $value {
          @include create-color-var($key, $val, $name);
        }
      }
    } @else {
      @include create-color-var($name, $value);
    }
  }
  // assign the "duplicate" colors (ones that just reference other variables)
  & {
    --pst-color-link: var(--pst-color-primary);
    --pst-color-link-hover: var(--pst-color-warning);
  }
  // adapt to light/dark-specific content
  @if $mode == "light" {
    .only-dark {
      display: none !important;
    }
  } @else {
    .only-light {
      display: none !important;
    }
    /* Adjust images in dark mode (unless they have class .only-dark or
     * .dark-light, in which case assume they're already optimized for dark
     * mode).
     */
    img:not(.only-dark):not(.dark-light) {
      filter: brightness(0.8) contrast(1.2);
    }
    /* Give images a light background in dark mode in case they have
    *  transparency and black text (unless they have class .only-dark or .dark-light, in
    *  which case assume they're already optimized for dark mode).
    */
    .bd-content img:not(.only-dark):not(.dark-light) {
      background: rgb(255, 255, 255);
      border-radius: 0.25rem;
    }
    // MathJax SVG outputs should be filled to same color as text.
    .MathJax_SVG * {
      fill: var(--pst-color-text-base);
    }
  }
}

/* Defaults to light mode if data-theme is not set */
html:not([data-theme]) {
  @include theme-colors("light");
}

/* NOTE: @each {...} is like a for-loop
 * https://sass-lang.com/documentation/at-rules/control/each
 */
@each $mode in (light, dark) {
  html[data-theme="#{$mode}"] {
    @include theme-colors($mode);
  }
}

// assign classes too, for runtime use of theme colors
@each $name, $value in $pst-semantic-colors {
  .pst-color-#{$name} {
    color: var(--pst-color-#{$name});
  }
}
