/* for colored buttons and badges, ensure text color is legible */
@function text-color($value) {
  @return if(lightness($value) > 70, #000, #fff);
}

/*******************************************************************************
* light theme
*
* all the variables used for light theme coloring
*/
html[data-theme="light"] {
  /*****************************************************************************
  * main colors. the $pst-semantic-colors follow the naming convention in
  * sphinx-design, to allow for color overrides in
  * ../extensions/_sphinx_design.scss. NOTE: some of these colors (most notably
  * the *-text and *-highlight variables) are **only** included to allow
  * sphinx-design overrides, and (probably?) should not be used in our own CSS rules.
  *
  * NOTE: this theme defines "info == primary" and "warning == secondary"
  */
  $pst-semantic-colors: (
    "primary": rgb(69, 157, 185),
    "secondary": rgb(238, 144, 64),
    "success": rgb(40, 167, 69),
    "info": rgb(69, 157, 185),
    "warning": rgb(238, 144, 64),
    "danger": rgb(220, 53, 69),
    "light": rgb(201, 201, 201),
    "muted": rgb(77, 77, 77),
    "dark": rgb(51, 51, 51),
    "black": rgb(0, 0, 0),
    "white": rgb(255, 255, 255),
  );

  @each $name, $value in $pst-semantic-colors {
    --pst-color-#{$name}: #{$value};
    --pst-color-#{$name}-text: #{text-color($value)};
    --pst-color-#{$name}-highlight: #{mix(#000, $value, 15%)};
  }
  /* ↓↓↓ these are not sphinx-design overrides ↓↓↓ */
  --pst-color-text-base: var(--pst-color-dark);
  --pst-color-text-muted: var(--pst-color-muted);
  --pst-color-border: var(--pst-color-light);
  --pst-color-shadow: rgb(216, 216, 216);

  /*****************************************************************************
  * depth colors
  *
  * background: color that defines the furthest back
  * on-background: provides light contrast against background, use of shadows in light theme
  * surface: object set above the background (without shadows)
  * on_surface: object on top of surface object (without shadows)
  */
  --pst-color-background: rgb(255, 255, 255);
  --pst-color-on-background: rgb(255, 255, 255);
  --pst-color-surface: rgb(240, 240, 240);
  --pst-color-on-surface: rgb(255, 255, 238);

  /*****************************************************************************
  * extentions
  */

  --pst-color-panel-background: var(--pst-color-on-background);

  /*****************************************************************************
  * content
  */

  // links
  --pst-color-link: var(--pst-color-primary);
  --pst-color-link-hover: var(--pst-color-secondary);

  // inline code
  --pst-color-inline-code: rgb(232, 62, 140);

  // targeted content
  --pst-color-target: rgb(251, 229, 78);

  /*****************************************************************************
  * layout
  */

  // hide any content that should not be displayed in the light theme
  .only-dark {
    display: none !important;
  }
}

/*******************************************************************************
* dark theme
*
* all the variables used for dark theme coloring
*/
html[data-theme="dark"] {
  /*****************************************************************************
  * main colors. See notes under data-theme="light", above.
  */
  $pst-semantic-colors: (
    "primary": rgb(69, 157, 185),
    "secondary": rgb(238, 144, 64),
    "success": rgb(72, 135, 87),
    "info": rgb(69, 157, 185),
    "warning": rgb(238, 144, 64),
    "danger": rgb(203, 70, 83),
    "light": rgb(201, 201, 201),
    "muted": rgb(192, 192, 192),
    "dark": rgb(201, 209, 217),
    "black": rgb(0, 0, 0),
    "white": rgb(255, 255, 255),
  );

  @each $name, $value in $pst-semantic-colors {
    --pst-color-#{$name}: #{$value};
    --pst-color-#{$name}-text: #{text-color($value)};
    --pst-color-#{$name}-highlight: #{mix(#fff, $value, 15%)};
  }

  --pst-color-text-base: var(--pst-color-dark);
  --pst-color-text-muted: var(--pst-color-muted);
  --pst-color-border: var(--pst-color-muted);
  --pst-color-shadow: var(--pst-color-background);

  /*****************************************************************************
  * depth colors
  *
  * See light theme section for documentation of what variables mean.
  */
  --pst-color-background: rgb(18, 18, 18);
  --pst-color-on-background: rgb(30, 30, 30);
  --pst-color-surface: rgb(41, 41, 41);
  --pst-color-on-surface: rgb(55, 55, 55);

  /*****************************************************************************
  * extentions
  */

  --pst-color-panel-background: var(--pst-color-on-background);

  /*****************************************************************************
  * content
  */

  // links
  --pst-color-link: var(--pst-color-primary);
  --pst-color-link-hover: var(--pst-color-secondary);

  // inline code
  --pst-color-inline-code: rgb(221, 158, 194);

  // targeted content
  --pst-color-target: rgb(71, 39, 0);

  // hide any content that should not be displayed in the dark theme
  .only-light {
    display: none !important;
  }

  /*****************************************************************************
  * images
  */

  // specific brightness applied on images
  img {
    filter: brightness(0.8) contrast(1.2);
  }

  // images within the content area get a light background on dark theme
  // in case they have transparency and black text
  // If they have an only-dark class, assume they're already optimized for dark
  .bd-content img:not(.only-dark) {
    background: rgb(255, 255, 255);
    border-radius: 0.25rem;
  }

  /*****************************************************************************
  * math
  */

  // MathJax SVG outputs should be filled to same color as text.
  .MathJax_SVG * {
    fill: var(--pst-color-text-base);
  }
}
